/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LibAsset {
  export type AssetTypeStruct = {
    assetClass: PromiseOrValue<BytesLike>;
    data: PromiseOrValue<BytesLike>;
  };

  export type AssetTypeStructOutput = [string, string] & {
    assetClass: string;
    data: string;
  };

  export type AssetStruct = {
    assetType: LibAsset.AssetTypeStruct;
    value: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type AssetStructOutput = [
    LibAsset.AssetTypeStructOutput,
    BigNumber,
    string,
    BigNumber
  ] & {
    assetType: LibAsset.AssetTypeStructOutput;
    value: BigNumber;
    token: string;
    tokenId: BigNumber;
  };
}

export declare namespace LibOrder {
  export type OrderStruct = {
    maker: PromiseOrValue<string>;
    makeAsset: LibAsset.AssetStruct;
    taker: PromiseOrValue<string>;
    takeAsset: LibAsset.AssetStruct;
    salt: PromiseOrValue<BigNumberish>;
    start: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
    dataType: PromiseOrValue<BytesLike>;
    data: PromiseOrValue<BytesLike>;
    typeMint: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    string,
    LibAsset.AssetStructOutput,
    string,
    LibAsset.AssetStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    maker: string;
    makeAsset: LibAsset.AssetStructOutput;
    taker: string;
    takeAsset: LibAsset.AssetStructOutput;
    salt: BigNumber;
    start: BigNumber;
    end: BigNumber;
    dataType: string;
    data: string;
    typeMint: BigNumber;
  };

  export type InputStruct = {
    maker: PromiseOrValue<string>;
    makeAsset: LibAsset.AssetStruct;
    taker: PromiseOrValue<string>;
    takeAssets: LibAsset.AssetStruct[];
    salt: PromiseOrValue<BigNumberish>;
    start: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
    dataType: PromiseOrValue<BytesLike>;
    data: PromiseOrValue<BytesLike>;
  };

  export type InputStructOutput = [
    string,
    LibAsset.AssetStructOutput,
    string,
    LibAsset.AssetStructOutput[],
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    maker: string;
    makeAsset: LibAsset.AssetStructOutput;
    taker: string;
    takeAssets: LibAsset.AssetStructOutput[];
    salt: BigNumber;
    start: BigNumber;
    end: BigNumber;
    dataType: string;
    data: string;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "cancel((address,((bytes4,bytes),uint256,address,uint256),address,((bytes4,bytes),uint256,address,uint256),uint256,uint256,uint256,bytes4,bytes,uint64))": FunctionFragment;
    "cancelExtension((address,((bytes4,bytes),uint256,address,uint256),address,((bytes4,bytes),uint256,address,uint256)[],uint256,uint256,uint256,bytes4,bytes))": FunctionFragment;
    "fills(bytes32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isOrderExtensionCancel(bytes32)": FunctionFragment;
    "matchOrderExtension((address,((bytes4,bytes),uint256,address,uint256),address,((bytes4,bytes),uint256,address,uint256)[],uint256,uint256,uint256,bytes4,bytes),bytes,(address,((bytes4,bytes),uint256,address,uint256),address,((bytes4,bytes),uint256,address,uint256),uint256,uint256,uint256,bytes4,bytes,uint64))": FunctionFragment;
    "matchOrders((address,((bytes4,bytes),uint256,address,uint256),address,((bytes4,bytes),uint256,address,uint256),uint256,uint256,uint256,bytes4,bytes,uint64),bytes,(address,((bytes4,bytes),uint256,address,uint256),address,((bytes4,bytes),uint256,address,uint256),uint256,uint256,uint256,bytes4,bytes,uint64),bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancel"
      | "cancelExtension"
      | "fills"
      | "initialize"
      | "isOrderExtensionCancel"
      | "matchOrderExtension"
      | "matchOrders"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancel",
    values: [LibOrder.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExtension",
    values: [LibOrder.InputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fills",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOrderExtensionCancel",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrderExtension",
    values: [
      LibOrder.InputStruct,
      PromiseOrValue<BytesLike>,
      LibOrder.OrderStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrders",
    values: [
      LibOrder.OrderStruct,
      PromiseOrValue<BytesLike>,
      LibOrder.OrderStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fills", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOrderExtensionCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchOrderExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Cancel(uint256,bytes4)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Match(address,uint256,bytes4,uint64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Match"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface CancelEventObject {
  salt: BigNumber;
  typeSale: string;
}
export type CancelEvent = TypedEvent<[BigNumber, string], CancelEventObject>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MatchEventObject {
  from: string;
  salt: BigNumber;
  typeSale: string;
  typeMint: BigNumber;
}
export type MatchEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  MatchEventObject
>;

export type MatchEventFilter = TypedEventFilter<MatchEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancel(
      order: LibOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelExtension(
      input: LibOrder.InputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fills(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOrderExtensionCancel(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    matchOrderExtension(
      input: LibOrder.InputStruct,
      signature: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    matchOrders(
      orderLeft: LibOrder.OrderStruct,
      signatureLeft: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      signatureRight: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancel(
    order: LibOrder.OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelExtension(
    input: LibOrder.InputStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fills(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOrderExtensionCancel(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  matchOrderExtension(
    input: LibOrder.InputStruct,
    signature: PromiseOrValue<BytesLike>,
    orderRight: LibOrder.OrderStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  matchOrders(
    orderLeft: LibOrder.OrderStruct,
    signatureLeft: PromiseOrValue<BytesLike>,
    orderRight: LibOrder.OrderStruct,
    signatureRight: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancel(
      order: LibOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelExtension(
      input: LibOrder.InputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    fills(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isOrderExtensionCancel(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    matchOrderExtension(
      input: LibOrder.InputStruct,
      signature: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    matchOrders(
      orderLeft: LibOrder.OrderStruct,
      signatureLeft: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      signatureRight: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Cancel(uint256,bytes4)"(salt?: null, typeSale?: null): CancelEventFilter;
    Cancel(salt?: null, typeSale?: null): CancelEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Match(address,uint256,bytes4,uint64)"(
      from?: null,
      salt?: null,
      typeSale?: null,
      typeMint?: null
    ): MatchEventFilter;
    Match(
      from?: null,
      salt?: null,
      typeSale?: null,
      typeMint?: null
    ): MatchEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    cancel(
      order: LibOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelExtension(
      input: LibOrder.InputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fills(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOrderExtensionCancel(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchOrderExtension(
      input: LibOrder.InputStruct,
      signature: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    matchOrders(
      orderLeft: LibOrder.OrderStruct,
      signatureLeft: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      signatureRight: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      order: LibOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelExtension(
      input: LibOrder.InputStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fills(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOrderExtensionCancel(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchOrderExtension(
      input: LibOrder.InputStruct,
      signature: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    matchOrders(
      orderLeft: LibOrder.OrderStruct,
      signatureLeft: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      signatureRight: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
